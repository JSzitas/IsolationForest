see[[3]]
see[[2]]
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( as.matrix( cbind( rnorm(100), rnorm(100)#, rep(1,100)
)), ext = 1, type = "vanilla") -> see
see[[2]]
see[[3]]
see[[1]]
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], type = "vanilla") -> see
View(see)
Rcpp::sourceCpp('tree_building_cpp.cpp')
isolationForest(test_data[,1:2], type = "vanilla") -> see
View(see)
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64) -> see
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE) -> see
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = FALSE) -> see
View(see)
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE) -> see
View(see)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE) -> see
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = FALSE) -> see
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE) -> see
microbenchmark::microbenchmark( isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE), isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = FALSE), times = 100 ) -> maybe_speedup
log(256)
ceil(log(256))
ceiling(log2(256))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(maybe_speedup)
maybe_speedup %>% plot
maybe_speedup %>% summary
source('~/.active-rstudio-document')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
extended_tester(test_data[,1:2], 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
extended_tester(as.matrix(test_data[,1:2]), 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 6)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 4)
View(smpld)
ceiling(log2(256))
Rcpp::sourceCpp('tree_building_cpp.cpp')
extended_tester(as.matrix(test_data[,1:2]), 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 2)
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 4)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 4)
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 4)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 6)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 2)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 3)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 4)
exporter( smpld,
ext = 1, max_depth = 4,
type = "extended")
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1, max_depth = 4,
type = "extended")
exporter( smpld,
ext = 1, max_depth = 8,
type = "extended")
Rcpp::sourceCpp('tree_building_cpp.cpp')
source('~/.active-rstudio-document')
View(maybe_speedup)
plot( maybe_speedup)
ggplot2::autoplot(maybe_speedup)
Rcpp::sourceCpp('tree_building_cpp.cpp')
source('~/.active-rstudio-document')
ggplot2::autoplot(maybe_speedup)
source('~/.active-rstudio-document')
ggplot2::autoplot(maybe_speedup)
summary(maybe_speedup)[1,]
summary(maybe_speedup)[1,]/summary(maybe_speedup)[2,]
summary(maybe_speedup)[2,1]/summary(maybe_speedup)[2,2]
summary(maybe_speedup)[,1]/summary(maybe_speedup)[,2]
summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),1]/summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),2]
as.numeric( summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),1])/as.numeric( summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),2])
as.numeric( summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),1])
as.numeric( summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),])
summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),]
summary(maybe_speedup)
summary(maybe_speedup) ->spdup
spdup
spdup[1,]
spdup[1,2:ncol(spdup)]
spdup[1,2:ncol(spdup)]/spdup[2, 2:ncol(spdup)]
spdup[1,2:(ncol(spdup)-1)]/spdup[2, 2:(ncol(spdup)-1)]
spdup[2,2:(ncol(spdup)-1)]/spdup[1, 2:(ncol(spdup)-1)]
?ROCR::performance()
getROC_AUC = function(probs, true_Y){
probsSort = sort(probs, decreasing = TRUE, index.return = TRUE)
val = unlist(probsSort$x)
idx = unlist(probsSort$ix)
roc_y = true_Y[idx];
stack_x = cumsum(roc_y == 2)/sum(roc_y == 2)
stack_y = cumsum(roc_y == 1)/sum(roc_y == 1)
auc = sum((stack_x[2:length(roc_y)]-stack_x[1:length(roc_y)-1])*stack_y[2:length(roc_y)])
return(list(stack_x=stack_x, stack_y=stack_y, auc=auc))
}
getROC_AUC( scored_data, true_Y = test_data[,3])
getROC_AUC( scored_data, true_Y = test_data[,3])
scored_data
getROC_AUC( preds, true_Y = test_data[,3])
getROC_AUC( res_vanilla, true_Y = test_data[,3])
res_vanilla
res_vanilla %>% sort()
library(magrittr)
res_vanilla %>% sort()
install.packages("mltools")
auroc <- function(score, bool) {
n1 <- sum(!bool)
n2 <- sum(bool)
U  <- sum(rank(score)[!bool]) - n1 * (n1 + 1) / 2
return(1 - U / n1 / n2)
}
auroc(res_vanilla, test_data[,3])
auroc(res_vanilla, as.numeric(test_data[,3]))
auroc(res_vanilla, as.numeric(anomaly_indicator))
auroc(res_vanilla, as.logical(anomaly_indicator))
as.logical(anomaly_indicator)
as.numeric(anomaly_indicator)
as.numeric(anomaly_indicator) - 1
auroc(res_vanilla, (as.numeric(anomaly_indicator) - 1))
auroc(res_vanilla, (as.numeric(anomaly_indicator) - 1))
auroc(res_vanilla, (as.numeric(anomaly_indicator) - 1))
auroc(res_vanilla, (as.numeric(anomaly_indicator) - 1))
auroc(res_extended, (as.numeric(anomaly_indicator) - 1))
auroc(res_ext, (as.numeric(anomaly_indicator) - 1))
auroc(res_see, (as.numeric(anomaly_indicator) - 1))
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 2)
residual_split(test_data[,1:2], 3)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 3)
residual_split(test_data[,1:2], 2)
residual_split(test_data[,1:2], 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 0)
residual_split(test_data[,1:2], 0)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 2)
residual_split(test_data[,1:2], 0)
residual_split(test_data[,1:2], 0)
residual_split(test_data[,1:2], 0)
residual_split(test_data[,1:2], 0)
residual_split(test_data[,1:2], 0)
residual_split(test_data[,1:2], 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
residual_split(test_data[,1:2], 1)
isolationForest(test_data[,1:2], Phi = 64) -> see_alt_res
isolationForest(test_data[,1:2], Phi = 64, type = "residual") -> see_alt_res
split(test_data[,1:2], type = "residual") -> alt_res
alt_res
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
isolationForest(test_data[,1:2], Phi = 64, type = "residual") -> see_alt_res
View(see_alt_res)
View(see_alt_res)
comparator_residual(Tree = see_alt_res[["forest"]][[1]], test_data[,1:2], 0)
predict.isolationForest(see_alt_res, test_data[,1:2]) -> pred_alt_res
pred_alt_res
auroc(pred_alt_res, unlist(test_data[,3]))
auroc(pred_alt_res, as.numeric( test_data[,3]) - 1)
auroc(pred_alt_res, as.numeric( test_data[,3]) - 1)
auroc(res_vanilla, as.numeric( test_data[,3]) - 1)
auroc(res_see, as.numeric( test_data[,3]) - 1)
auroc(res_ext, as.numeric( test_data[,3]) - 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_tree_splitting.R')
extended_split(test_data[,1:2], 1)
extended_split(test_data[,1:2], 1)
extended_split(test_data[,1:2], 1)
extended_split(test_data[,1:2], 1)
extended_split(test_data[,1:2], 1)
extended_split(test_data[,1:2], 1)
extended_split(test_data[,1:2], 1)
View(extension)
Rcpp::sourceCpp('tree_building_cpp.cpp')
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
source('~/.active-rstudio-document')
View(see)
source('~/.active-rstudio-document')
View(iTree)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
View(iTree_cpp)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
View(test_cpp)
isolationForest(test_data[,1:2], n_trees = 1000, type = "vanilla", cpp = TRUE) -> test_cpp
predict.isolationForest(test_cpp, test_data[,1:2])
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_predict.R')
predict.isolationForest(test_cpp, test_data[,1:2])
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
test_cpp[["forest"]][[1]][[2]]
test_cpp[["forest"]][[1]][[2]]
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
View(test_cpp)
predict.isolationForest(test_cpp, test_data[,1:2])
test_cpp[["forest"]][[1]][[2]]
test_cpp[["forest"]][[1]][[1]]
test_cpp[["forest"]][[2]][[2]]
test_cpp[["forest"]][[11]][[2]]
predict.isolationForest(test_cpp, test_data[,1:2])
path_length(test_data[,1:2], current_depth = 0, node_index = 1, path_len_fun = "vanilla")
path_length(test_data[,1:2],Tree = test_cpp$forest[[1]], current_depth = 0, node_index = 1, path_len_fun = "vanilla")
path_length(test_data[,1:2],Tree = test_cpp$forest[[1]], current_depth = 0, node_index = 1, path_len_fun = tree_type_selector("vanilla") )
path_length(as.matrix(test_data[,1:2]),Tree = test_cpp$forest[[1]], current_depth = 0, node_index = 1, path_len_fun = tree_type_selector("vanilla") )
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 0)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 1)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 2)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 3)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 4)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 5)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 6)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 7)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 8)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 7)
8 => 7
8 >= 7
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_predict.R')
path_length(as.matrix(test_data[,1:2]),Tree = test_cpp$forest[[1]], current_depth = 0, node_index = 1, path_len_fun = tree_type_selector("vanilla") )
path_length(as.matrix(test_data[,1:2]),Tree = test_cpp$forest[[2]], current_depth = 0, node_index = 1, path_len_fun = tree_type_selector("vanilla") )
path_length(as.matrix(test_data[,1:2]),Tree = test_cpp$forest[[3]], current_depth = 0, node_index = 1, path_len_fun = tree_type_selector("vanilla") )
path_length(as.matrix(test_data[,1:2]),Tree = test_cpp$forest[[4]], current_depth = 0, node_index = 1, path_len_fun = tree_type_selector("vanilla") )
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
Rcpp::sourceCpp('tree_building_cpp.cpp')
source('~/.active-rstudio-document')
View(see)
see[[1]]
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
predict.isolationForest(test_cpp, test_data[,1:2])
path_length(as.matrix(test_data[,1:2]),Tree = test_cpp$forest[[4]], current_depth = 0, node_index = 1, path_len_fun = tree_type_selector("vanilla") )
path_length(as.matrix(test_data[,1:2]),Tree = test_cpp$forest[[1]], current_depth = 0, node_index = 1, path_len_fun = tree_type_selector("vanilla") )
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 7)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 7)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 8)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 6)
comparator_vanilla(Tree = test_cpp$forest[[1]], X = test_data[,1:2], current_depth = 2)
path_length(test_data[,1:2], current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
path_length(test_data[,1:2], Tree = test_cpp$forest[[1]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
path_length(test_data[,1:2], Tree = test_cpp$forest[[4]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
path_length(test_data[,1:2], Tree = test_cpp$forest[[6]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
is.matrix( test_cpp[["forest"]][[1]][[1]])
path_length(test_data[,1:2], Tree = test_cpp$forest[[6]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
path_length(test_data[,1:2], Tree = test_cpp$forest[[6]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
path_length(test_data[,1:2], Tree = test_cpp$forest[[6]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
path_length(test_data[,1:2], Tree = test_cpp$forest[[6]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = FALSE) -> test_noncpp
View(test_noncpp)
test_noncpp[["forest"]][[1]][[1]]
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
path_length(test_data[,1:2], Tree = test_noncpp$forest[[6]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
path_length(test_data[,1:2], Tree = test_noncpp$forest[[1]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
path_length(test_data[,1:2], Tree = test_noncpp$forest[[2]],  current_depth = 0, node_index = 1, tree_type_selector("vanilla"))
predict.isolationForest(test_noncpp, test_data[,1:2])
View(test_noncpp)
test_noncpp[["forest"]][[5]][[1]]
test_noncpp[["forest"]][[21]][[1]]
source('C:/Users/juraj/git_hub/IsolationForest/R/predict.R')
source('C:/Users/juraj/git_hub/IsolationForest/R/predict.R')
predict.isolationForest(test_noncpp, test_data[,1:2])
predict.isolationForest(test_cpp, test_data[,1:2])
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1], 0, 1])
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1])
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
source('C:/Users/juraj/git_hub/IsolationForest/R/predict.R')
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
test_cpp$forest[[1]]
test_cpp$forest[[1]][[1]]
test_cpp$forest[[1]][[1]][1, "Size"]
test_data[ , test_cpp$forest[[1]][[2]][1, 1]] - test_cpp$forest[[1]][[2]][1, 2]< 0
test_cpp$forest[[1]][[1]]
test_cpp$forest[[1]][[1]][1, "Type"]
test_cpp$forest[[2]][[1]][1, "Type"]
test_cpp$forest[[3]][[1]][1, "Type"]
test_cpp$forest[[4]][[1]][1, "Type"]
View(test_cpp)
Rcpp::sourceCpp('tree_building_cpp.cpp')
source('~/.active-rstudio-document')
View(scored_data)
View(see)
see[[1]]
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
source('~/.active-rstudio-document')
View(see)
see[[1]]
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_predict.R')
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
Rcpp::sourceCpp('tree_building_cpp.cpp')
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
predict.isolationForest(test_cpp, newdata = as.matrix(test_data[,1:2]))
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
path_length_vanilla(test_data[,1:2], test_noncpp$forest[[1]] , 0, 1)
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
View(test_cpp)
isolationForest(test_data[,1:2], n_trees = 100, type = "vanilla", cpp = TRUE) -> test_cpp
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
path_length_vanilla(test_data[,1:2], test_cpp$forest[[1]] , 0, 1)
path_length(test_data[,1:2], test_cpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
path_length(as.matrix(test_data[,1:2]), test_cpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
path_length(as.matrix(test_data[,1:2]), test_noncpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
View(test_noncpp)
test_noncpp[["forest"]][[1]][[1]]
View(test_cpp)
test_cpp[["forest"]][[1]][[1]]
test_cpp[["forest"]][[2]][[1]]
test_data[ , test_cpp$forest[[1]][[2]][1, 1]] - test_cpp$forest[[1]][[2]][1, 2]< 0
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_predict.R')
path_length(as.matrix(test_data[,1:2]), test_noncpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_predict.R')
path_length(as.matrix(test_data[,1:2]), test_noncpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_predict.R')
path_length(as.matrix(test_data[,1:2]), test_noncpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_predict.R')
path_length(as.matrix(test_data[,1:2]), test_noncpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
path_length(as.matrix(test_data[,1:2]), test_noncpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
path_length(as.matrix(test_data[,1:2]), test_noncpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
source('C:/Users/juraj/git_hub/IsolationForest/R/refactor_predict.R')
path_length(as.matrix(test_data[,1:2]), test_noncpp$forest[[1]] , 0, 1, path_len_fun = tree_type_selector("vanilla"))
