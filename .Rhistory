colnames(test_data)
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = TRUE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = FALSE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = FALSE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = FALSE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = FALSE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = FALSE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = FALSE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = FALSE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = TRUE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = TRUE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = X,
y = Y,
scores = scored_data,
contour = TRUE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
anomaly_plot( x = X,
y = Y,
forest = fit,
contour = TRUE,
contamination = 0.12 # we have contaminated about 10-15% of the data
# with anomalous values
)
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE )
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE )
anomaly_plot( x = "X",
y = "Y",
data = test_data,
forest = fit,
data = test_data[,1:2],
contour = FALSE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE )
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE )
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE,  )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE, contamination = 0.1  )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE, contamination = 0.15  )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE, contamination = 0.17  )
sum(unlist(anomaly_indicator))
sum(unlist(as.integer(anomaly_indicator)) )
sum(unlist(as.integer(anomaly_indicator == 2)) )
sum(unlist(as.integer(anomaly_indicator == 1)) )
sum(unlist(anomaly_indicator == 1))
anomaly_indicator
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.15 # we have contaminated total_anomalous/nrow(test_data),
# observations, so if we set the contamination rate to this                                    #  number, or close to it, we will see roughly how well the                                    # algorithm does
)
install.packages(Rfast)
install.packages("Rfast")
Rfast::knn(y = scored_data,x = test_data[,1:2], dist.type = "euclidean", type = "R", method = "average")
Rfast::knn(xnew = test_data[,1:2],y = scored_data,x = test_data[,1:2], dist.type = "euclidean", type = "R", method = "average")
Rfast::knn(xnew = test_data[,1:2],y = scored_data,x = test_data[,1:2], dist.type = "euclidean", type = "R",k = 10, method = "average")
Rfast::knn(xnew = as.matrix(test_data[,1:2]), y = scored_data, x = as.matrix(test_data[,1:2]), dist.type = "euclidean", type = "R",k = 10, method = "average")
better_scores <- Rfast::knn(xnew = as.matrix(test_data[,1:2]), y = scored_data, x = as.matrix(test_data[,1:2]), dist.type = "euclidean", type = "R",k = 10, method = "average")
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.15 # we have contaminated total_anomalous/nrow(test_data),
# observations, so if we set the contamination rate to this                                    #  number, or close to it, we will see roughly how well the                                    # algorithm does
)
anomaly_plot( x = "X",
y = "Y",
scores = better_scores,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.15 # we have contaminated total_anomalous/nrow(test_data),
# observations, so if we set the contamination rate to this                                    #  number, or close to it, we will see roughly how well the                                    # algorithm does
)
better_scores <- Rfast::knn(xnew = as.matrix(test_data[,1:2]), y = scored_data, x = as.matrix(test_data[,1:2]), dist.type = "euclidean", type = "R",k = 5, method = "average")
anomaly_plot( x = "X",
y = "Y",
scores = better_scores,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.15 # we have contaminated total_anomalous/nrow(test_data),
# observations, so if we set the contamination rate to this                                    #  number, or close to it, we will see roughly how well the                                    # algorithm does
)
reticulate::py_install("eif")
?reticulate::py_install()
reticulate::py_install("eif", pip = TRUE)
max_nodes(10)
2^10
View(max_nodes)
source('C:/Users/juraj/git_hub/IsolationForest/R/tree_building.R')
max_nodes(10)
source('C:/Users/juraj/git_hub/IsolationForest/R/tree_building.R')
max_nodes(10)
max_nodes(10)
max_nodes(8)
max_nodes(1)
max_nodes(2)
max_nodes(3)
max_nodes(4)
max_nodes(5)
source('C:/Users/juraj/git_hub/IsolationForest/R/tree_building.R')
max_nodes(1)
max_nodes(2)
max_nodes(3)
max_nodes(4)
max_nodes(5)
max_nodes(6)
max_nodes(7)
max_nodes(10)
remove(list=ls())
set.seed(1071)
X <- rnorm( 500, 0, 1)
Y <- rnorm( 500, 0, 1)
replace_x <- sample(1:500, 20 )
replace_y <- sample(1:500, 50 )
X[replace_x] <- rnorm(20, mean = 3, sd = 2)
Y[replace_y] <- rnorm(50, mean = -4, sd = 1.5)
anomaly_indicator <- rep(0,500)
anomaly_indicator[replace_x] <- 1
anomaly_indicator[replace_y] <- 1
anomaly_indicator <- as.factor(anomaly_indicator)
test_data <- data.frame(X, Y, anomaly_indicator)
ggplot2::ggplot(data = test_data, ggplot2::aes( x = X,
y = Y,
colour = anomaly_indicator,
shape = anomaly_indicator )) +
ggplot2::geom_point(size = 1.9) +
ggplot2::scale_colour_manual(name = "Anomaly", values = c("#2554C7","#E42217")) +
ggplot2::scale_shape_manual(name = "Anomaly", values = c(15,17))
source('C:/Users/juraj/git_hub/IsolationForest/R/tree_building.R')
source('C:/Users/juraj/git_hub/IsolationForest/R/forest.R')
source('C:/Users/juraj/git_hub/IsolationForest/R/predict.R')
source('C:/Users/juraj/git_hub/IsolationForest/R/anomaly_plot.R')
total_anomalous <- sum(unlist(anomaly_indicator == 1))
fit <- isolationForest( X = test_data[,1:2], # we dont want column 3 here.
n_trees = 1000,
Phi = 62, # subsampling rate for individual trees
parallel = TRUE, # defaults to future::plan("multiprocess")
future_plan = "multiprocess", # change this argument
# to change the plan
extension_level = 1, # how 'extended' should the trees be?
vanilla = FALSE      # whether to fit an unextended, original
# isolation forest
)
scored_data <- predict.isolationForest(fit, test_data[,1:2])
source('C:/Users/juraj/git_hub/IsolationForest/R/predict.R')
scored_data <- predict.isolationForest(fit, test_data[,1:2])
scored_data <- predict.isolationForest(fit, test_data[,1:2])
fit$forest[[1]]
fit$forest[[1]][[1]]
scored_data <- predict.isolationForest(fit, test_data[,1:2])
fit <- isolationForest( X = test_data[,1:2], # we dont want column 3 here.
n_trees = 1000,
Phi = 64, # subsampling rate for individual trees
parallel = TRUE, # defaults to future::plan("multiprocess")
future_plan = "multiprocess", # change this argument
# to change the plan
extension_level = 1, # how 'extended' should the trees be?
vanilla = FALSE      # whether to fit an unextended, original
# isolation forest
)
fit <- isolationForest( X = test_data[,1:2], # we dont want column 3 here.
n_trees = 100,
parallel = TRUE, # defaults to future::plan("multiprocess")
future_plan = "multiprocess", # change this argument
# to change the plan
extension_level = 1, # how 'extended' should the trees be?
vanilla = FALSE      # whether to fit an unextended, original
# isolation forest
)
View(max_nodes)
max_nodes(!)
max_nodes(12)
max_nodes(10)
max_nodes(8)
log2(64)
iTree(data, 10, extension_level = 1, FALSE)
iTree(test_data, 10, extension_level = 1, FALSE)
iTree(test_data, 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
iTree(test_data[,1:2], 10, extension_level = 1, TRUE)
fit <- isolationForest( X = test_data[,1:2], Phi = 64)
View(fit)
predict.isolationForest(fit, test_data[,1:2])
set.seed(1071)
X <- rnorm( 500, 0, 1)
Y <- rnorm( 500, 0, 1)
replace_x <- sample(1:500, 20 )
replace_y <- sample(1:500, 50 )
X[replace_x] <- rnorm(20, mean = 3, sd = 2)
Y[replace_y] <- rnorm(50, mean = -4, sd = 1.5)
anomaly_indicator <- rep(0,500)
anomaly_indicator[replace_x] <- 1
anomaly_indicator[replace_y] <- 1
anomaly_indicator <- as.factor(anomaly_indicator)
test_data <- data.frame(X, Y, anomaly_indicator)
ggplot2::ggplot(data = test_data, ggplot2::aes( x = X,
y = Y,
colour = anomaly_indicator,
shape = anomaly_indicator )) +
ggplot2::geom_point(size = 1.9) +
ggplot2::scale_colour_manual(name = "Anomaly", values = c("#2554C7","#E42217")) +
ggplot2::scale_shape_manual(name = "Anomaly", values = c(15,17))
total_anomalous <- sum(unlist(anomaly_indicator == 1))
fit <- isolationForest( X = test_data[,1:2], # we dont want column 3 here.
n_trees = 1000,
Phi = 64, # subsampling rate for individual trees
parallel = TRUE, # defaults to future::plan("multiprocess")
future_plan = "multiprocess", # change this argument
# to change the plan
extension_level = 1, # how 'extended' should the trees be?
vanilla = FALSE      # whether to fit an unextended, original
# isolation forest
)
scored_data <- predict.isolationForest(fit, test_data[,1:2])
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.15 # we have contaminated total_anomalous/nrow(test_data),
# observations
)
fit <- isolationForest( X = test_data[,1:2], # we dont want column 3 here.
n_trees = %000,
Phi = 64, # subsampling rate for individual trees
parallel = TRUE, # defaults to future::plan("multiprocess")
future_plan = "multiprocess", # change this argument
# to change the plan
extension_level = 1, # how 'extended' should the trees be?
vanilla = FALSE      # whether to fit an unextended, original
# isolation forest
)
fit <- isolationForest( X = test_data[,1:2], # we dont want column 3 here.
n_trees = 5000,
Phi = 64, # subsampling rate for individual trees
parallel = TRUE, # defaults to future::plan("multiprocess")
future_plan = "multiprocess", # change this argument
# to change the plan
extension_level = 1, # how 'extended' should the trees be?
vanilla = FALSE      # whether to fit an unextended, original
# isolation forest
)
anomaly_plot( x = "X",
y = "Y",
forest = fit,scores = scored_data,
data = test_data[,1:2],
contour = TRUE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,scores = scored_data,
data = test_data[,1:2],
contour = TRUE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.15 # we have contaminated total_anomalous/nrow(test_data),
# observations
)
future::plan("sequential")
anomaly_plot( x = "X",
y = "Y",
forest = fit,scores = scored_data,
data = test_data[,1:2],
contour = TRUE )
set.seed(1071)
X <- rnorm( 500, 0, 1)
Y <- rnorm( 500, 0, 1)
replace_x <- sample(1:500, 20 )
replace_y <- sample(1:500, 50 )
X[replace_x] <- rnorm(20, mean = 3, sd = 2)
Y[replace_y] <- rnorm(50, mean = -4, sd = 1.5)
anomaly_indicator <- rep(0,500)
anomaly_indicator[replace_x] <- 1
anomaly_indicator[replace_y] <- 1
anomaly_indicator <- as.factor(anomaly_indicator)
test_data <- data.frame(X, Y, anomaly_indicator)
ggplot2::ggplot(data = test_data, ggplot2::aes( x = X,
y = Y,
colour = anomaly_indicator,
shape = anomaly_indicator )) +
ggplot2::geom_point(size = 1.9) +
ggplot2::scale_colour_manual(name = "Anomaly", values = c("#2554C7","#E42217")) +
ggplot2::scale_shape_manual(name = "Anomaly", values = c(15,17))
total_anomalous <- sum(unlist(anomaly_indicator == 1))
fit <- isolationForest( X = test_data[,1:2], # we dont want column 3 here.
n_trees = 1000,
Phi = 64, # subsampling rate for individual trees
parallel = TRUE, # defaults to future::plan("multiprocess")
future_plan = "multiprocess", # change this argument
# to change the plan
extension_level = 1, # how 'extended' should the trees be?
vanilla = FALSE      # whether to fit an unextended, original
# isolation forest
)
scored_data <- predict.isolationForest(fit, test_data[,1:2])
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.15 # we have contaminated total_anomalous/nrow(test_data),
# observations
)
fit <- isolationForest( X = test_data[,1:2], # we dont want column 3 here.
n_trees = 10000,
Phi = 64, # subsampling rate for individual trees
parallel = TRUE, # defaults to future::plan("multiprocess")
future_plan = "multiprocess", # change this argument
# to change the plan
extension_level = 1, # how 'extended' should the trees be?
vanilla = FALSE      # whether to fit an unextended, original
# isolation forest
)
scored_data <- predict.isolationForest(fit, test_data[,1:2])
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.15 # we have contaminated total_anomalous/nrow(test_data),
# observations
)
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.2
)
anomaly_plot( x = "X",
y = "Y",
forest = fit, scores = scored_data,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.2
)
scored_data <- predict.isolationForest(fit, test_data[,1:2], knn_smoothed = TRUE)
anomaly_plot( x = "X",
y = "Y",
forest = fit, scores = scored_data,
data = test_data[,1:2],
contour = FALSE,
contamination = 0.2
)
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE )
anomaly_plot( x = "X",
y = "Y",
forest = fit,
data = test_data[,1:2],
contour = TRUE )
