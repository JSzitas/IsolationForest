logarithm = FALSE )
determinant( matrix(data = rbinom(4,size = 1, prob = 0.1), ncol = 2, nrow = 2),
logarithm = FALSE )
determinant( matrix(data = rbinom(4,size = 1, prob = 0.5), ncol = 2, nrow = 2),
logarithm = FALSE )
rand_matrix <- function( size, rng = runif ){
res <-  matrix( data = rbinom( size^2,
size = 1,
prob = do.call(rng, list(1))),
ncol = size, nrow = size)
return(res)
}
rand_matrix(10)
rand_matrix(10)
rand_matrix(10)
rand_matrix(10)
rand_matrix(10)
rand_matrix(10)
rand_matrix(10)
rand_matrix(10)
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
det( rand_matrix(10))
j = 4:50
i = 1:10000
res <- rep(NA, max(i)*max(j))
for(k in j){
for(l in i){
res[l] <- det( rand_matrix(k) )
}
}
j = 4:50
i = 1:10000
res <- rep(NA, max(i)*max(j))
for(k in j){
for(l in i){
res[l] <- det( rand_matrix(k) )
}
}
hist(res)
summary(res)
j = 4:50
i = 1:10000
res <- rep(NA, max(i)*max(j))
for(k in j){
for(l in i){
res[l*k] <- det( rand_matrix(k) )
}
}
summary(res)
j = 1:50
i = 1:10000
res <- rep(NA, max(i)*max(j))
for(k in j){
for(l in i){
res[l*k] <- det( rand_matrix(k) )
}
}
summary(res)
det( rand_matrix(1) )
det( rand_matrix(1) )
det( rand_matrix(1) )
det( rand_matrix(2) )
det( rand_matrix(2) )
det( rand_matrix(2) )
det( rand_matrix(2) )
det( rand_matrix(2) )
det( rand_matrix(3) )
det( rand_matrix(50) )
det( rand_matrix(50) )
det( rand_matrix(50) )
det( rand_matrix(50) )
det( rand_matrix(50) )
det( rand_matrix(50) )
det( rand_matrix(50) )
det( rand_matrix(50) )
det( rand_matrix(50) )
det( rand_matrix(50) )
hist(res)
for(k in 1:50){
for(l in 1:10000){
l*k
# res[l*k] <- det( rand_matrix(k) )
}
}
res <- rep(NA, 50000)
for(k in 1:50){
for(l in 1:10000){
print(l*k)
# res[l*k] <- det( rand_matrix(k) )
}
}
res <- rep(NA, 50000)
for(i in 1:50000){
res[i] <- det( rand_matrix( floor(runif(1, 1, 50))) )
}
hist(res)
summary(res)
mean(res)
mean(res) -> summa
res <- rep(NA, 500000)
for(i in 1:500000){
res[i] <- det( rand_matrix( floor(runif(1, 1, 50))) )
}
mean(res) -> summa
summary(res)
hist(res)
?hist()
hist(res, breaks = seq(min(res),max(res), l = 100))
hist(res, breaks = seq(min(res),max(res), l = 10))
hist(res, breaks = seq(min(res),max(res), l = 1))
hist(res, breaks = seq(min(res),max(res), l = 3))
hist(res, breaks = seq(min(res),max(res), l = 5))
hist(res, breaks = seq(min(res),max(res), l = 6))
hist(res, breaks = seq(min(res),max(res), l = 7))
density(res) %>% plot
library(magrittr)
density(res) %>% plot
det_onemat <- function(size){
res <-
matrix(data = 1, nrow = size, ncol = size) - diag(x = 1, nrow = size, ncol = size)
return(res)
}
det_onemat(1)
det_onemat(2)
det_onemat(3)
det_onemat(4)
det_onemat(5)
det_onemat <- function(size){
res <-
det( matrix(data = 1, nrow = size, ncol = size) -
diag(x = 1, nrow = size, ncol = size))
return(res)
}
det_onemat(1)
det_onemat(2)
det_onemat(3)
det_onemat(4)
det_onemat(5)
det_onemat(6)
det_onemat(7)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
uvec_test( 1:100, 1:1000)
uvec_test( 1:100, 1:100)
uvec_test( 1:100, 1:10)
uvec_test( 1:100, 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1)
uvec_test( 1:100, 10)
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
uvec_test( 1:100, 1:15)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:15)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:15)
uvec_test( 1:100, 0:14)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 0:14)
uvec_test( 1:100, c(1,2,5,8))
uvec_test( 0:100, c(1,2,5,8))
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 0:100, c(1,2,5,8))
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 0:100, c(1,2,5,8))
uvec_test( 1:100, c(1,2,5,8))
uvec_test( 0:100, 0:100)
uvec_test( 1:100, 1:100)
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test( 1:100, 1:10)
Rcpp::sourceCpp('test_num_vec.cpp')
no_na(1:100, 1:10)
no_na(1:100, c( rep(1,90), 1:10))
rep(1,90)
no_na(1:100, c( rep(0,1000)))
no_na(1:100, c( rep(0,100)))
no_na(1:100, c( rep(1,100)))
no_na(1:100, c( rep(1,10), rep(0,90)))
Rcpp::sourceCpp('test_num_vec.cpp')
Rcpp::sourceCpp('test_num_vec.cpp')
no_na(1:100, 1:5)
Rcpp::sourceCpp('test_num_vec.cpp')
Rcpp::sourceCpp('test_num_vec.cpp')
no_na(1:100, 1:5)
Rcpp::sourceCpp('test_num_vec.cpp')
no_na(1:100, 1:5)
Rcpp::sourceCpp('test_num_vec.cpp')
no_na(1:100, 1:5)
Rcpp::sourceCpp('test_num_vec.cpp')
no_na(1:100, 1:5)
Rcpp::sourceCpp('test_num_vec.cpp')
no_na(1:100, 1:5)
no_na(1:100, 0:5)
no_na(1:100, 1:5)
no_na(1:100, 0:5)
no_na(1:100, 0:4)
no_na(0:100, 0:4)
Rcpp::sourceCpp('test_num_vec.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
uvec_test(1:100, 1:10)
uvec_test(1:100, 0:9)
uvec_test(0:100, 0:9)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( as.matrix( cbind( rnorm(100), rnorm(100)#, rep(1,100)
)), ext = 1, type = "extended") -> see
exporter( as.matrix( cbind( rnorm(100), rnorm(100)#, rep(1,100)
)), ext = 1, type = "vanilla") -> see
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( as.matrix( cbind( rnorm(100), rnorm(100)#, rep(1,100)
)), ext = 1, type = "vanilla") -> see
View(see)
see[[1]]
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( as.matrix( cbind( rnorm(100), rnorm(100)#, rep(1,100)
)), ext = 1, type = "vanilla") -> see
see
exporter( as.matrix( cbind( rnorm(100), rnorm(100)#, rep(1,100)
)), ext = 1, type = "vanilla") -> see
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( as.matrix( cbind( rnorm(100), rnorm(100)#, rep(1,100)
)), ext = 1, type = "vanilla") -> see
View(see)
see[[3]]
see[[2]]
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( as.matrix( cbind( rnorm(100), rnorm(100)#, rep(1,100)
)), ext = 1, type = "vanilla") -> see
see[[2]]
see[[3]]
see[[1]]
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], type = "vanilla") -> see
View(see)
Rcpp::sourceCpp('tree_building_cpp.cpp')
isolationForest(test_data[,1:2], type = "vanilla") -> see
View(see)
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64) -> see
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE) -> see
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = FALSE) -> see
View(see)
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE) -> see
View(see)
source('C:/Users/juraj/git_hub/IsolationForest/R/refactored_forest.R')
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE) -> see
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = FALSE) -> see
isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE) -> see
microbenchmark::microbenchmark( isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = TRUE), isolationForest(test_data[,1:2], type = "vanilla", Phi = 64, cpp = FALSE), times = 100 ) -> maybe_speedup
log(256)
ceil(log(256))
ceiling(log2(256))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(maybe_speedup)
maybe_speedup %>% plot
maybe_speedup %>% summary
source('~/.active-rstudio-document')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
extended_tester(test_data[,1:2], 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 0)
extended_tester(as.matrix(test_data[,1:2]), 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
extended_tester(as.matrix(test_data[,1:2]), 1)
extended_tester(as.matrix(test_data[,1:2]), 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
Rcpp::sourceCpp('tree_building_cpp.cpp')
extended_tester(as.matrix(test_data[,1:2]), 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 6)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 4)
View(smpld)
ceiling(log2(256))
Rcpp::sourceCpp('tree_building_cpp.cpp')
extended_tester(as.matrix(test_data[,1:2]), 1)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 2)
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 4)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 4)
exporter( smpld,
ext = 1,
type = "vanilla",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 8)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 4)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 6)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 2)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 3)
exporter( smpld,
ext = 1,
type = "extended",
max_depth = 4)
exporter( smpld,
ext = 1, max_depth = 4,
type = "extended")
Rcpp::sourceCpp('tree_building_cpp.cpp')
exporter( smpld,
ext = 1, max_depth = 4,
type = "extended")
exporter( smpld,
ext = 1, max_depth = 8,
type = "extended")
Rcpp::sourceCpp('tree_building_cpp.cpp')
source('~/.active-rstudio-document')
View(maybe_speedup)
plot( maybe_speedup)
ggplot2::autoplot(maybe_speedup)
Rcpp::sourceCpp('tree_building_cpp.cpp')
source('~/.active-rstudio-document')
ggplot2::autoplot(maybe_speedup)
source('~/.active-rstudio-document')
ggplot2::autoplot(maybe_speedup)
summary(maybe_speedup)[1,]
summary(maybe_speedup)[1,]/summary(maybe_speedup)[2,]
summary(maybe_speedup)[2,1]/summary(maybe_speedup)[2,2]
summary(maybe_speedup)[,1]/summary(maybe_speedup)[,2]
summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),1]/summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),2]
as.numeric( summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),1])/as.numeric( summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),2])
as.numeric( summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),1])
as.numeric( summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),])
summary(maybe_speedup)[2:ncol(summary(maybe_speedup)),]
summary(maybe_speedup)
summary(maybe_speedup) ->spdup
spdup
spdup[1,]
spdup[1,2:ncol(spdup)]
spdup[1,2:ncol(spdup)]/spdup[2, 2:ncol(spdup)]
spdup[1,2:(ncol(spdup)-1)]/spdup[2, 2:(ncol(spdup)-1)]
spdup[2,2:(ncol(spdup)-1)]/spdup[1, 2:(ncol(spdup)-1)]
